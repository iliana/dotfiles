#!/usr/bin/env python3
# pylint: disable=missing-function-docstring,missing-module-docstring

import argparse
import subprocess
from multiprocessing import Pool
from pathlib import Path

import r128gain
from mediafile import MediaFile


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("flacs", nargs="+", type=MediaFile)
    parser.add_argument("--out-dir", type=Path)
    args = parser.parse_args()

    with Pool() as pool:
        jobs = ((flac.path, flac.samplerate, args.out_dir) for flac in args.flacs)
        aacs = pool.starmap(run_convert, jobs)

    for flac, aac in zip(args.flacs, aacs):
        aac = MediaFile(aac)
        aac.art = flac.art
        aac.artist = flac.artist
        aac.date = flac.original_date or flac.date
        aac.title = flac.title
        if flac.album is not None:
            aac.album = flac.album
            aac.albumartist = flac.albumartist
            aac.disc = flac.disc or 1
            aac.track = flac.track
        aac.save()

    r128gain.process(list(map(str, aacs)), album_gain=True)


def run_convert(file, sample_rate, out_dir):
    while sample_rate > 48000:
        sample_rate //= 2
    out = (out_dir or Path(file).parent) / Path(file).with_suffix(".m4a").name
    subprocess.run(
        [
            "afconvert",
            "--data",
            f"aac@{sample_rate}",
            "--strategy",
            "3",
            "-ue",
            "vbrq",
            "80",
            "--quality",
            "127",
            file,
            out,
        ],
        check=True,
    )
    return out


if __name__ == "__main__":
    main()
